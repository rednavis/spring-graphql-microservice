schema {
    query: EmployeeQueries
    mutation: EmployeeMutations
}

type EmployeeQueries {
    findAll: [EmployeeDto]
    findById(id: ID!): EmployeeDto!
    findByOrganizationId(organizationId: String!): [EmployeeDto]
    findByDepartmentId(departmentId: String!): [EmployeeDto]
}

type EmployeeMutations {
    insert(employeeDto: EmployeeInsert!): EmployeeDto
    save(employeeDto: EmployeeUpdate!): EmployeeDto
    deleteById(id: ID!) : Boolean
}

input EmployeeInsert {
    organizationId: String!
    departmentId: String!
    name: String!
    age: Int!
    city: String!
    salary: Int!
}

input EmployeeUpdate {
    id: ID!
    organizationId: String!
    departmentId: String!
    name: String!
    age: Int!
    city: String!
    salary: Int!
}

type EmployeeDto {
    id: ID!
    organizationId: String!
    departmentId: String!
    name: String!
    age: Int!
    city: String!
    salary: Int!
}

type Query {
    bookById(id: ID): Book
}

type Book {
    id: ID
    name: String
    pageCount: Int
    author: Author
}

type Author {
    id: ID
    firstName: String
    lastName: String
}